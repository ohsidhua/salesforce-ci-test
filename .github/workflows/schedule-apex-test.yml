name: Salesforce RunLocalTests

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  run-salesforce-tests:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    env:
      SFDX_AUTH_URL: ${{ secrets.SFDX_AUTH_URL }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Salesforce CLI
        run: |
          npm install @salesforce/cli --global
          sf --version

      - name: Authenticate to Salesforce Org
        run: |
          echo "${SFDX_AUTH_URL}" > sfdx_auth.txt
          sf org login sfdx-url -f sfdx_auth.txt --alias DevHub
          sf org display --target-org DevHub

      - name: Run Local Apex Tests
        id: runtests
        continue-on-error: true
        run: |
          mkdir -p test-results
          echo "Running Apex tests..."
          sf apex run test \
            --result-format json \
            --code-coverage \
            --test-level RunLocalTests \
            --target-org DevHub \
            --output-dir test-results \
            --json | tee test-results/test-result.json
          echo "Exit code: $?" || true
          echo "Listing generated test files:"
          ls -R test-results || true

      - name: Parse and Format Results
        id: parse
        run: |
          echo "Parsing test results..."
          RESULTS=$(cat test-results/test-result.json)

          STATUS=$(jq -r '.result.summary.outcome // "Unknown"' <<< "$RESULTS")
          TOTAL=$(jq -r '.result.summary.testsRan // 0' <<< "$RESULTS")
          PASSED=$(jq -r '.result.summary.passing // 0' <<< "$RESULTS")
          FAILED=$(jq -r '.result.summary.failing // 0' <<< "$RESULTS")
          SKIPPED=$(jq -r '.result.summary.skipped // 0' <<< "$RESULTS")
          TIME=$(jq -r '.result.summary.testTotalTime // 0' <<< "$RESULTS")
          ORG_COV=$(jq -r '.result.summary.orgWideCoverage // 0' <<< "$RESULTS")
          FAILING_CLASSES=$(jq -r '.result.tests[]? | select(.Outcome=="Fail") | .FullName' <<< "$RESULTS")

          if [ -z "$FAILING_CLASSES" ]; then
            FAILING_CLASSES="None"
          fi

          # Set emoji based on status
          if [ "$FAILED" -gt 0 ]; then
            EMOJI="ðŸ”´"
          else
            EMOJI="ðŸŸ¢"
          fi

          SUMMARY=$(cat <<EOF
          **$EMOJI Salesforce Test Summary**

          â€¢ **Status:** $STATUS  
          â€¢ **Test Level:** RunLocalTests  
          â€¢ **Total Tests:** $TOTAL  
          â€¢ **Passed:** $PASSED  
          â€¢ **Failed:** $FAILED  
          â€¢ **Skipped:** $SKIPPED  
          â€¢ **Execution Time:** ${TIME}s  
          â€¢ **Org Coverage:** ${ORG_COV}%

          **Failing Classes:**  
          \`\`\`
          $FAILING_CLASSES
          \`\`\`
          EOF
          )

          echo "$SUMMARY" > test-results/summary.md
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Summary to PR
        if: always()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "Salesforce Test Summary"
          message: ${{ steps.parse.outputs.summary }}

      - name: Send Summary to Slack
        if: always()
        run: |
          echo "Sending results to Slack..."
          PAYLOAD=$(jq -n \
            --arg text ":salesforce: *Salesforce Test Results*\n\n${{ steps.parse.outputs.summary }}" \
            '{text: $text}')
          curl -X POST -H 'Content-type: application/json' \
            --data "$PAYLOAD" \
            $SLACK_WEBHOOK_URL
